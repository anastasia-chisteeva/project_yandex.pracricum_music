#Импорт библиотек
import pandas as pd

#Чтение файла и сохранение его в переменной
df = pd.read_csv('/datasets/music_project.csv')

#Первые 10 сток таблицы
df.head(10)

#Информация от данных таблицы df
df.info()

#Перечень столбцов
df.columns

new_names = ['user_id', 'track_name', 'artist_name', 'genre_name', 'city', 'time', 'weekday']
df.set_axis(new_names, axis='columns', inplace=True)

df.columns

df.isnull().sum()

df['track_name'] = df['track_name'].fillna('unknown')
df['artist_name'] = df['artist_name'].fillna('unknown')
df.isnull().sum()

df.dropna(subset=['genre_name'], inplace=True) 
df.isnull().sum()

df.duplicated().sum()

df = df.drop_duplicates().reset_index(drop=True)
df.duplicated().sum()

genres_list = df['genre_name'].unique()

def find_genre(genre):
    count = 0
    for elem in genres_list:
        if elem==genre: count+=1
    return count
# функция принимает как параметр строку с названием искомого жанра
# в теле объявляется переменная-счётчик, ей присваивается значение 0,
# затем цикл for проходит по списку уникальных значений
# если очередной элемент списка равен параметру функции, 
# то значение счётчика увеличивается на 1
# по окончании работы цикла функция возвращает значение счётчика

find_genre('hip')
find_genre('hop')
find_genre('hip-hop')

# <создание функции find_hip_hop()>
# функция принимает как параметры таблицу df и неверное название
# к столбцу 'genre_name' применяется специальный метод, 
# который заменяет второй параметр на строку 'hiphop'
# результат работы равен подсчитанному методом count() числу значений столбца, 
# которые равны второму параметру
# функция возвращает результат
def find_hip_hop(df, incorrect_name):
    df['genre_name'] = df['genre_name'].replace(incorrect_name, 'hiphop')
    column_values = df.loc[df.loc[:,'genre_name'] == 'wrong']['genre_name'].count()
    return column_values
    
find_hip_hop(df, 'hip')

df.info()

# <группировка данных таблицы df по столбцу 'city' и подсчёт количества значений столбца 'genre_name'>
df.groupby('city')['genre_name'].count()

# <группировка данных по столбцу 'weekday' и подсчёт количества значений столбца 'genre_name'>
df.groupby('weekday')['genre_name'].count()

# <создание функции number_tracks()>
# объявляется функция с тремя параметрами: df, day, city
# в переменной track_list сохраняются те строки таблицы df, для которых 
# значение в столбце 'weekday' равно параметру day
# и одновременно значение в столбце 'city' равно параметру city
# в переменной track_list_count сохраняется число значений столбца 'genre_name',
# рассчитанное методом count() для таблицы track_list
# функция возвращает значение track_list_count
def number_tracks(df, day, city):
    track_list = df[(df['weekday']==day)&(df['city']==city)]
    track_list_count = track_list['genre_name'].count()
    return track_list_count
    
# <список композиций для Москвы в понедельник>
number_tracks(df, 'Monday', 'Moscow')

# <список композиций для Санкт-Петербурга в понедельник>
number_tracks(df, 'Monday', 'Saint-Petersburg')

# <список композиций для Москвы в среду>
number_tracks(df, 'Wednesday', 'Moscow')

# <список композиций для Санкт-Петербурга в среду>
number_tracks(df, 'Wednesday', 'Saint-Petersburg')

# <список композиций для Москвы в пятницу>
number_tracks(df, 'Friday', 'Moscow')

# <список композиций для Санкт-Петербурга в пятницу>
number_tracks(df, 'Friday', 'Saint-Petersburg')

# <таблица с полученными данными>
data = [['Moscow', 15347, 10865, 15680],
       ['Saint-Petersburg', 5519, 6913, 5802]]
columns =  ['city', 'monday', 'wednesday', 'friday'] 
table = pd.DataFrame(data=data, columns=columns)

# получение таблицы moscow_general из тех строк таблицы df, для которых значение в столбце 'city' равно 'Moscow'
moscow_general = df[df['city']=='Moscow']

# <получение таблицы spb_general>
spb_general = df[df['city']=='Saint-Petersburg']

# объявление функции genre_weekday() с параметрами df, day, time1, time2
# в переменной genre_list сохраняются те строки df, для которых одновременно:
# 1) значение в столбце 'weekday' равно параметру day,
# 2) значение в столбце 'time' больше time1 и
# 3) меньше time2.
# в переменной genre_list_sorted сохраняются в порядке убывания  
# первые 10 значений Series, полученной подсчётом числа значений 'genre_name'
# сгруппированной по столбцу 'genre_name' таблицы genre_list
# функция возвращает значение genre_list_sorted
def genre_weekday(df, day, time1, time2):
    genre_list = df[(df['weekday']==day)&(df['time']>time1)&(df['time']<time2)]
    genre_list_sorted = genre_list.groupby('genre_name')['genre_name'].count().sort_values(ascending = False).head(10)
    return genre_list_sorted
    
# <вызов функции для утра понедельника в Москве>
genre_weekday(moscow_general, 'Monday', '07:00:00', '11:00:00')

# <вызов функции для утра понедельника в Петербурге>
genre_weekday(spb_general, 'Monday', '07:00:00', '11:00:00')

# <вызов функции для вечера пятницы в Москве>
genre_weekday(moscow_general, 'Friday', '17:00:00', '23:00:00')

# <вызов функции для вечера пятницы в Питере>
genre_weekday(spb_general, 'Friday', '17:00:00', '23:00:00')

# одной строкой: группировка таблицы moscow_general по столбцу 'genre_name', подсчёт числа значений 'genre_name' в этой группировке методом count(), 
# сортировка Series в порядке убывания и сохранение в moscow_genres
moscow_genres=moscow_general.groupby('genre_name')['genre_name'].count().sort_values(ascending = False)

# <просмотр первых 10 строк moscow_genres>
moscow_genres.head(10)

# <группировка таблицы spb_general, расчёт, сохранение в spb_genres>
spb_genres = spb_general.groupby('genre_name')['genre_name'].count().sort_values(ascending = False)

# <просмотр первых 10 строк spb_genres>
spb_genres.head(10)

